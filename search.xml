<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Unity中的空间与运动</title>
    <url>/2024/09/29/Unity%E4%B8%AD%E7%9A%84%E7%A9%BA%E9%97%B4%E4%B8%8E%E8%BF%90%E5%8A%A8/</url>
    <content><![CDATA[<h1 id="一-简易运动与叠加"><a href="#一-简易运动与叠加" class="headerlink" title="一. 简易运动与叠加"></a>一. 简易运动与叠加</h1><h5 id="1-运动与复合运动"><a href="#1-运动与复合运动" class="headerlink" title="1. 运动与复合运动"></a>1. 运动与复合运动</h5><ul>
<li><p>创建一个游戏对象</p>
</li>
<li><p>创建一个脚本MoveLeft，脚本会使对象每秒向左移动一个单位</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MoveLeft</span> : <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="comment">// Use this for initialization</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Update is called once per frame</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.transform.position += Vector3.left * Time.deltaTime;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中，Vector表示三维向量，<code>Vector3.left</code> 是单位常数，共有<code>up, down, forward, back</code>等属性</li>
<li><code>Time.deltaTime</code> 这个循环与上个循环之间的时间差</li>
</ul>
</li>
<li><p>仿照代码创造一个脚本MoveUp，加上speed属性</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="built_in">int</span> speed = <span class="number">2</span>;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">this</span>.transform.position += speed * Vector3.left * Time.deltaTime;</span><br></pre></td></tr></table></figure>

<ul>
<li>此脚本会使对象每秒向上平移两个单位</li>
</ul>
</li>
<li><p>把两个脚本都拖动到游戏对象上，发现对象向左上平移</p>
<ul>
<li>在对象的属性栏里找到脚本，更改那里新增的speed属性，速度会变化</li>
<li>注意，这里不用新建空对象！因为是游戏对象自己独立的运动。</li>
</ul>
</li>
</ul>
<h5 id="2-Transform组件"><a href="#2-Transform组件" class="headerlink" title="2. Transform组件"></a>2. Transform组件</h5>]]></content>
      <tags>
        <tag>作业 Unity</tag>
      </tags>
  </entry>
  <entry>
    <title>简易使用教程</title>
    <url>/2024/09/14/hello-world/</url>
    <content><![CDATA[<p>框架：<a href="https://hexo.io/">Hexo</a></p>
<p>文档： <a href="https://hexo.io/docs/">documentation</a> </p>
<p>QA： <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> </p>
<p><a href="https://github.com/hexojs/hexo/issues">GitHub</a></p>
<span id="more"></span>

<h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><h3 id="新建博客"><a href="#新建博客" class="headerlink" title="新建博客"></a>新建博客</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;Name&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="本地调试"><a href="#本地调试" class="headerlink" title="本地调试"></a>本地调试</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>我的第一篇blog</title>
    <url>/2024/09/14/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87blog/</url>
    <content><![CDATA[<h2 id="这是一个测试"><a href="#这是一个测试" class="headerlink" title="这是一个测试"></a>这是一个测试</h2><p>测试评论区</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
      <tags>
        <tag>试验品</tag>
      </tags>
  </entry>
  <entry>
    <title>用Construct3制作平台跳跃游戏</title>
    <url>/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<h1 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h1><p>Construct 3是一款基于 HTML5 的 2D 游戏开发工具，它免于编程的特点能够帮助不会写代码的人构建游戏。它能够在浏览器中运行，实时调试修改，并且能导出到网页、桌面、移动设备等多种平台。对于游戏制作初学者而言，它是一个理想而友好的入门工具。</p>
<p>本博客记录了笔者初次使用Construct 3构建简单的平台跳跃游戏的思考与实践过程。</p>
<p>本游戏所有图片素材来源于tobyfox制作的独立游戏《undertale》，并非笔者本人绘制！</p>
<p>Construct 3网页直通车：<a href="https://editor.construct.net/?startTour">https://editor.construct.net/?startTour</a></p>
<p><a href="%E7%8B%97%E8%B7%B3%E5%86%B0.c3p">游戏文件下载</a>（可导入Construct 3试玩）</p>
<p>在线试玩连接：<a href="https://boreascup.github.io/DogJumpIce/">https://boreascup.github.io/DogJumpIce/</a></p>
<span id="more"></span>

<br>

<h1 id="2-游戏概述"><a href="#2-游戏概述" class="headerlink" title="2. 游戏概述"></a>2. 游戏概述</h1><h3 id="2-1-界面概览"><a href="#2-1-界面概览" class="headerlink" title="2.1 界面概览"></a>2.1 界面概览</h3><p><img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/image-20240914151410672.png" alt="关卡界面概览"></p>
<br>

<h3 id="2-2-规则"><a href="#2-2-规则" class="headerlink" title="2.2 规则"></a>2.2 规则</h3><ul>
<li>你扮演的角色是一只狗。狗可以通过方向键操控，连续按两次↑能够二段跳，按住↓会趴下。趴下时可以移动</li>
<li>浅色冰块易碎。浅色冰块无法承受狗的体重，狗踩到浅色冰块时冰块将破碎</li>
<li>狗是有温度的狗。所以狗碰撞到雪人时，雪人将融化</li>
<li>狗碰撞骨头时，狗会开始吃骨头。狗很贪吃，所以狗吃骨头时无法移动</li>
<li>狗碰到蓝色星星时，星星会消失</li>
<li>蘑菇是感应菇。狗与蘑菇重叠时，蘑菇会发光</li>
<li>两个雪屋被神秘力量联结，可以相互传送</li>
<li>狗是不死狗。狗掉落到底部虚空后会重新回到出生点</li>
<li>玩家胜利条件是：收集所有星星！吃掉所有骨头！融化所有雪人！</li>
</ul>
<br>

<h1 id="3-制作心得"><a href="#3-制作心得" class="headerlink" title="3. 制作心得"></a>3. 制作心得</h1><h3 id="3-1-移动"><a href="#3-1-移动" class="headerlink" title="3.1 移动"></a>3.1 移动</h3><ul>
<li><p>Construct3（下文简称C3）预设了最基本的角色移动控件。左右转、跳跃、二段跳、平台识别、重力、加速度等物理相关功能几乎一键搞定，十分方便。</p>
</li>
<li><p>关键点是把主控角色的【行为】模块中添加【平台】与【镜头跟随】</p>
</li>
<li><p>角色行动时具有【移动】与【静止】两种动画。</p>
<p><img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/image-20240918231527674.png" alt="事件表演示1"></p>
</li>
</ul>
<h3 id="3-2-重开与通关"><a href="#3-2-重开与通关" class="headerlink" title="3.2 重开与通关"></a>3.2 重开与通关</h3><ul>
<li><p>由于C3场景大小有限，我很自然地将【角色离开场景】定为角色死亡-重开的判定标志。下坠死亡符合一般逻辑，但调试过程中我发现在一些位于场景偏上方的平台上二段跳时，角色可能会超出画布高度，此时也会被系统判定为死亡。这有些反直觉了。所以我将画面的上方和左右两边都添加了边框。</p>
</li>
<li><p>角色离开场景时，销毁角色，重载场景&amp;重置全局变量。此时游戏镜头将回到出生点。</p>
</li>
<li><p>当检测到星星、骨头和雪人剩余数量都为0时，系统判定玩家通关，询问玩家是否想重新开始游戏，并且例行重置场景和变量。</p>
<img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/image-20240918233145509.png" alt="通关判断" style="zoom:67%;"></li>
</ul>
<h3 id="3-3-事件表"><a href="#3-3-事件表" class="headerlink" title="3.3 事件表"></a>3.3 事件表</h3><ul>
<li><p>值得注意的是，事件表的条件相当于编程中的while。我一开始一直以为它相当于if，导致出现了很多问题。</p>
<ul>
<li>比如，我想实现一个效果：当狗碰撞到骨头时，【狗】开始播放【吃骨头】的动画，而【骨头】被销毁。按照【条件：狗碰撞骨头；动作：播放动画+销毁骨头】这个逻辑写出来后，发现骨头确实没了，但吃骨头的动画也消失了。这是因为系统判定【狗与骨头接触】时才会播放动画，不接触时直接停止动画；而两个动作是没有先后顺序的，这导致狗碰到骨头的一瞬间骨头就被销毁，狗与骨头的实际接触时间为零，那动画自然也不会播放了。</li>
<li>有什么办法让骨头消失在视野中，而狗确实碰到了骨头呢？我想到了令骨头的透明度变为零。于是我将逻辑修改成：<img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/image-20240914221714909.png" alt="事件表演示2" style="zoom: 67%;"></li>
<li>成功了！透明度万岁！</li>
</ul>
</li>
<li><p>雪人融化、碎冰冰和吃星星三个事件逻辑大体一致：碰撞，切动画，动画完成后销毁对象</p>
<img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/image-20240918232419475.png" alt="事件表演示3" style="zoom:67%;">
</li>
<li><p>雪屋传送</p>
<ul>
<li><p>逻辑是碰撞后把角色位置设置到另一个坐标。注意另一个坐标位置不能和雪屋重叠，不然就无限循环传送了</p>
<img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/image-20240918232810527.png" alt="事件表演示4" style="zoom:67%;"></li>
</ul>
</li>
</ul>
<h3 id="3-3-关卡设计"><a href="#3-3-关卡设计" class="headerlink" title="3.3 关卡设计"></a>3.3 关卡设计</h3><ul>
<li><p>没有死胡同</p>
<ul>
<li>对线路以及平台之间的距离进行了反复测试，确保了玩家不会被困在任何一个平台上。</li>
<li>但也制作了一些跳跃距离比较极限的路径，比如地图右下角是可以一路跳到右上角的。</li>
</ul>
</li>
<li><p>引导机制</p>
<ul>
<li><p>在距离出生点很近的浅色冰块上放置了星星，勾引玩家捡星星，向玩家展示冰块会破裂</p>
</li>
<li><p>有两处地方需要玩家按下↓键，使狗趴下，减少角色高度，才能钻进缝隙吃到星星。在这两处地方的入口都放置了一块骨头（狗吃骨头时会趴下，作为提示）</p>
<img src="/2024/09/14/%E7%94%A8Construct3%E5%88%B6%E4%BD%9C%E5%B9%B3%E5%8F%B0%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/getdown.jpg" alt="趴下提示" style="zoom:50%;"></li>
</ul>
</li>
</ul>
<br>

<h1 id="4-视频演示"><a href="#4-视频演示" class="headerlink" title="4. 视频演示"></a>4. 视频演示</h1>

 <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
 <iframe src="//player.bilibili.com/player.html?aid=113135914720620&bvid=BV1eftMeCEUV&cid=25858541594&p=1"" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div>


 

<br>

<h1 id="5-TODO"><a href="#5-TODO" class="headerlink" title="5. TODO"></a>5. TODO</h1><ul>
<li>如果可以的话，加大地图</li>
<li>增加分数显示、血量显示等</li>
<li>增加bgm和音效</li>
</ul>
]]></content>
      <categories>
        <category>游戏设计作业</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
  <entry>
    <title>用Unity制作简易计算器</title>
    <url>/2024/09/29/%E7%94%A8Unity%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<h3 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h3><p>初步学习Unity的使用吗，了解游戏对象、空对象、脚本、材质以及它们之间的相互作用关系，掌握常见游戏事件的使用及其执行顺序，学会使用 unity 的简单操作与编程。</p>
<p>学习mvc 设计，并用于小型游戏编程。</p>
<span id="more"></span>

<br>

<h3 id="二、简答题"><a href="#二、简答题" class="headerlink" title="二、简答题"></a>二、简答题</h3><ol>
<li><strong>游戏对象（GameObjects）与资源（Assets）的区别与联系</strong></li>
</ol>
<ul>
<li>游戏对象是游戏场景中的实体，它们是游戏中一切可见或不可见的东西的基本单元，如玩家、敌人、灯光、摄像机等。每个游戏对象包含多个组件（<code>Component</code>），如 <code>Transform</code>、<code>Renderer</code>、<code>Collider</code> 等，赋予其不同的属性和功能。游戏对象是运行时动态的，可以被激活、销毁或克隆。</li>
<li>资源是项目中保存的数据文件，如 3D 模型、音频、贴图、脚本等，它们用来构建游戏对象。资源是静态的，存储在项目的 <code>Assets</code> 文件夹中，通常需要加载或实例化成游戏对象才能在场景中使用。资源可以用于生成游戏对象。预制件是一种资源，它可以在运行时实例化为游戏对象。</li>
</ul>
<br>

<ol start="2">
<li><strong>使用 <code>Debug</code> 验证 <code>MonoBehaviour</code> 的基本行为和事件触发条件</strong></li>
</ol>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MonoBehaviourTest</span> : <span class="title">MonoBehaviour</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Awake</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Awake is called once when the script instance is being loaded.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Start is called before the first frame update.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;Update is called once per frame.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">FixedUpdate</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;FixedUpdate is called once per physics update.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;LateUpdate is called after all Update functions have been called.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnGUI</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;OnGUI is called for rendering and handling GUI events.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnDisable</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;OnDisable is called when the object becomes disabled.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">OnEnable</span>()</span>&#123;</span><br><span class="line">        Debug.Log(<span class="string">&quot;OnEnable is called when the object becomes enabled.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<ol start="3">
<li><strong>GameObject、Transform、Component 官方描述的翻译</strong></li>
</ol>
<ul>
<li><code>GameObject</code> 是 Unity 场景中的基本对象，表示角色、道具、场景、摄像机、路径点等。</li>
<li><code>Transform</code> 组件定义场景中每个对象的位置、旋转和缩放。</li>
<li><code>Component</code> 是附加到 <code>GameObject</code> 的基础类，用于启用行为、外观和交互。</li>
</ul>
<br>

<ol start="4">
<li><strong>预设（Prefabs）与对象克隆（Clone）</strong></li>
</ol>
<ul>
<li><p>预设的好处</p>
<ul>
<li>可以预先定义一个游戏对象，并保存为资源，便于重复使用。</li>
<li>提高开发效率，便于统一管理和更新对象的属性和行为。</li>
</ul>
</li>
<li><p>预设与克隆的关系</p>
<ul>
<li>预设是资源，可以在运行时使用 <code>Instantiate</code> 将其克隆为一个独立的游戏对象。</li>
</ul>
</li>
</ul>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> GameObject tablePrefab;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Start</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    GameObject tableInstance = Instantiate(tablePrefab, <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>), Quaternion.identity);</span><br><span class="line">    Debug.Log(<span class="string">&quot;Table prefab instantiated.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<h3 id="三、编程实践"><a href="#三、编程实践" class="headerlink" title="三、编程实践"></a>三、编程实践</h3><p>实验内容：使用IMGUI构建UI，用MVC模式制作一个简易计算器</p>
<p><img src="/2024/09/29/%E7%94%A8Unity%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/image-20240929132323990.png" alt="界面概览"></p>
<p><strong>MVC模式介绍</strong></p>
<ul>
<li>Model模型<ul>
<li>存储和管理数据。</li>
<li>处理业务规则和逻辑。</li>
<li>响应控制器的请求，提供数据给视图。</li>
</ul>
</li>
</ul>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> display = <span class="string">&quot;0&quot;</span>;    <span class="comment">// 显示的值</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> input = <span class="string">&quot;&quot;</span>;       <span class="comment">// 当前输入的数字</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">string</span> operation = <span class="string">&quot;&quot;</span>;   <span class="comment">// 当前操作符</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">float</span> result = <span class="number">0</span>;        <span class="comment">// 当前计算结果</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> isNewOperation = <span class="literal">true</span>; <span class="comment">// 是否是新操作</span></span><br><span class="line"><span class="keyword">private</span> <span class="built_in">bool</span> hasOperation = <span class="literal">false</span>;  <span class="comment">// 是否已有操作符</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>View视图</p>
<ul>
<li><p>显示模型提供的数据。</p>
</li>
<li><p>提供界面元素，供用户操作。</p>
</li>
<li><p><code>GUI.Box()</code>：构建显示屏，显示当前的计算结果。</p>
<p><code>GUI.Button()</code>：生成按钮，供用户点击输入数字和操作符。</p>
<p><code>PressNumber()</code> 和 <code>PressOperation()</code>：这些是控制器中的函数，用来处理用户输入</p>
<p><img src="/2024/09/29/%E7%94%A8Unity%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/image-20240929135408124.png" alt="示例代码"></p>
</li>
</ul>
</li>
<li><p>Controller控制器</p>
<ul>
<li><p>处理用户输入（如表单提交、按钮点击）。</p>
</li>
<li><p>调用模型更新数据。</p>
</li>
<li><p>决定使用哪个视图来显示结果。</p>
</li>
<li><p><code>PressNumber()</code>：处理用户点击数字按钮的事件，更新输入和显示。</p>
<p><code>PressOperation()</code>：处理操作符按钮的输入，决定何时进行计算。</p>
<p><code>Calculate()</code>：根据用户输入的操作符，执行相应的计算逻辑。</p>
<p><code>ResetCalculator()</code>：重置所有状态，恢复计算器到初始状态</p>
<img src="/2024/09/29/%E7%94%A8Unity%E5%88%B6%E4%BD%9C%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/image-20240929135240958.png" alt="示例代码" style="zoom:80%;"></li>
</ul>
</li>
</ul>
<br>

<h3 id="四、成果展示"><a href="#四、成果展示" class="headerlink" title="四、成果展示"></a>四、成果展示</h3><p><strong>代码仓库</strong></p>
<p><a href="https://github.com/Boreascup/UnityGameDesignHw/tree/main/hw3%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8">https://github.com/Boreascup/UnityGameDesignHw/tree/main/hw3%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8</a></p>
<p><strong>视频展示</strong></p>


 <div style="position: relative; width: 100%; height: 0; padding-bottom: 75%;">
 <iframe src="//player.bilibili.com/player.html?isOutside=true&aid=113218173276387&bvid=BV1tVx6e2EgS&cid=26053510402&p=1"" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 100%; height: 100%; Left: 0; top: 0;"></iframe></div>

 
]]></content>
      <categories>
        <category>游戏设计作业</category>
      </categories>
      <tags>
        <tag>作业</tag>
      </tags>
  </entry>
</search>
